<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Math-Modeling on Clingm&#39;s Blog</title>
    <link>https://clingm.github.io/tags/math-modeling/</link>
    <description>Recent content in Math-Modeling on Clingm&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>© Clingm</copyright>
    <lastBuildDate>Mon, 28 Oct 2024 20:20:52 +0800</lastBuildDate>
    <atom:link href="https://clingm.github.io/tags/math-modeling/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>浅谈第一次数模比赛的体验</title>
      <link>https://clingm.github.io/posts/mathematical-modeling/first-sm/</link>
      <pubDate>Thu, 18 May 2023 15:30:31 +0800</pubDate>
      <guid>https://clingm.github.io/posts/mathematical-modeling/first-sm/</guid>
      <description>&lt;p&gt;上个星期和几个朋友一起打了第三届长三角数学建模比赛，作为第一次打数模的小白来说感觉就是，有大佬带好爽😍。&lt;/p&gt;&#xA;&lt;p&gt;这次比赛我们选择的是B题，题目描述如下：&lt;/p&gt;&#xA;&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;&#xA;&lt;p&gt;{% pdf &lt;a href=&#34;https://cdn.jsdelivr.net/gh/clingm/PicGo-image/2023%E5%B9%B4%E7%AC%AC%E4%B8%89%E5%B1%8A%E9%95%BF%E4%B8%89%E8%A7%92%E9%AB%98%E6%A0%A1%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9BB%E9%A2%98.pdf&#34;&gt;https://cdn.jsdelivr.net/gh/clingm/PicGo-image/2023%E5%B9%B4%E7%AC%AC%E4%B8%89%E5%B1%8A%E9%95%BF%E4%B8%89%E8%A7%92%E9%AB%98%E6%A0%A1%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9BB%E9%A2%98.pdf&lt;/a&gt; %}&lt;/p&gt;&#xA;&lt;p&gt;​ 看完题目描述，很容易看的出来这是一道大数据题目，需要预测和对参数做一下重要性评估。在整个论文中，我负责的是第二问重要性评估和对论文的排版($\LaTeX$)。&lt;/p&gt;&#xA;&lt;h2 id=&#34;数据收集&#34;&gt;数据收集&lt;/h2&gt;&#xA;&lt;p&gt;​ 作为一道大数据题目，主办方并没有给数据，要我们自己找。这也是整个比赛最难受的地方，我们第一去找的数据是新能源汽车的产量和销量，通过google我们成功找到来一些资源，包括收费的和不收费的😢。在这些资源中，我们又找到了数据的来源，&lt;a href=&#34;http://www.stats.gov.cn/&#34;&gt;国家统计局&lt;/a&gt;，和各地的经济发展公报，比如&lt;a href=&#34;http://tj.jiangsu.gov.cn/art/2021/3/10/art_85275_10487723.html&#34;&gt;2020年江苏省国民经济和社会发展统计公报&lt;/a&gt;，在这里可以找到如下数据&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/clingm/PicGo-image/img/image-20230519125113847.png&#34; alt=&#34;image-20230519125113847&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;​ 这里对新能源汽车的产量有特别标注出来，其他省份也一样但也有比较奇怪的，比如上海市2018年公报内容是这样的&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/clingm/PicGo-image/img/image-20230519125602060.png&#34; alt=&#34;image-20230519125602060&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;并没有把新能源汽车的产量特别标注出来，而是与其他新兴产业合在一起给来一个增长百分比。那我们去找2017年的&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/clingm/PicGo-image/img/image-20230519125829005.png&#34; alt=&#34;image-20230519125829005&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;跟2018一样，2016同样如此。只有2019年开始才跟江苏省一样把新能源汽车标出来，但是江苏，浙江，安徽都是从2016年开始就这样了。还有就是2016年前的官方一点数据都咩有，呜呜~。2016-2022就七年的的时间，而且还是以年为单位的，也是就我们要用7个数据去预测后面3各数据，对于机器学习或者神经网络来说我感觉还是比较难的。&lt;/p&gt;&#xA;&lt;p&gt;​ 在找数据的过程中，我认为最离谱的还是那些卖数据的。明明他们的数据也基本是从官方渠道来的，而且这些数据都是公开的，非公开的国家数据应该也不能拿来卖吧（？。还有一些是专门卖这个赛题的数据的，更离谱了，甚至有些数据还是错的，大无语。&lt;/p&gt;&#xA;&lt;h2 id=&#34;重要性评估&#34;&gt;重要性评估&lt;/h2&gt;&#xA;&lt;p&gt;由于最近有学习人工智能方面的东西，尤其是深度学习，所以一下子就想到了随机森林算法。在得到数据之后，利用sklearn很容易构建出一个模型。我们收集到的的有关数据包括&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;年份&lt;/li&gt;&#xA;&lt;li&gt;燃油价格&lt;/li&gt;&#xA;&lt;li&gt;电动车充电成本&lt;/li&gt;&#xA;&lt;li&gt;电动车平均价格&lt;/li&gt;&#xA;&lt;li&gt;燃油车平均价格&lt;/li&gt;&#xA;&lt;li&gt;新能源汽车能源效率&lt;/li&gt;&#xA;&lt;li&gt;燃油车能源效率&lt;/li&gt;&#xA;&lt;li&gt;新能源车政府补贴金额&lt;/li&gt;&#xA;&lt;li&gt;新能源汽车企业数量&lt;/li&gt;&#xA;&lt;li&gt;新能源汽车专利申请数量&lt;/li&gt;&#xA;&lt;li&gt;新能源汽车充电桩数量&lt;/li&gt;&#xA;&lt;li&gt;新能源汽车燃油车保有量比&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;并且使用&lt;code&gt;新能源汽车燃油车保有量比&lt;/code&gt;作为新能源汽车和燃油车的竞争量。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from sklearn.ensemble import RandomForestRegressor&#xA;&#xA;rfc = RandomForestRegressor(n_estimators=82,random_state=4, n_jobs=1)&#xA;rfc.fit(x_train,y_train)&#xA;y_pred = rfc.predict(x_test)&#xA;y_train_pred = rfc.predict(x_train)&#xA;&#xA;#特征重要程度分析&#xA;feat_labels = x_train.columns[0:]&#xA;importances = rfc.feature_importances_&#xA;indices = np.argsort(importances)[::-1]&#xA;print(&#39;特征重要程度排名&#39;)&#xA;for f,j in zip(range(x_train.shape[1]),indices):&#xA;    print(f + 1, feat_labels[j], importances[j])&#xA;&#xA;#预测准确度&#xA;plt.plot(np.arange(10), np.concatenate((np.array(y_train)[:, 0],np.array(y_test)[:, 0]), 0), &amp;quot;go-&amp;quot;, label=u&amp;quot;True Value&amp;quot;)&#xA;plt.plot(np.arange(10), np.concatenate((y_train_pred,y_pred[:])), &amp;quot;ro-&amp;quot;, label=u&amp;quot;Pred Value&amp;quot;)&#xA;plt.legend()&#xA;plt.show&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;代码并不是完整的，只是对构建模型的过程做一个说明。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
