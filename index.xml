<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clingm&#39;s Blog</title>
    <link>https://clingm.github.io/</link>
    <description>Recent content on Clingm&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>© Clingm</copyright>
    <lastBuildDate>Mon, 28 Oct 2024 19:24:25 +0800</lastBuildDate>
    <atom:link href="https://clingm.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于我</title>
      <link>https://clingm.github.io/about/</link>
      <pubDate>Mon, 28 Oct 2024 15:30:31 +0800</pubDate>
      <guid>https://clingm.github.io/about/</guid>
      <description>&lt;p&gt;目前还没有内容。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Machine Learning Start -- Kmeans</title>
      <link>https://clingm.github.io/posts/machine-learning/ml-start-kmeans/</link>
      <pubDate>Sat, 27 Jan 2024 17:03:21 +0800</pubDate>
      <guid>https://clingm.github.io/posts/machine-learning/ml-start-kmeans/</guid>
      <description>&lt;h2 id=&#34;instro&#34;&gt;instro&lt;/h2&gt;&#xA;&lt;p&gt;K均值聚类（K-Means clustering）是一种常见的无监督学习算法，用于将数据集划分为K个簇。&lt;/p&gt;&#xA;&lt;p&gt;算法伪代码如下&#xA;&lt;img src=&#34;https://s2.loli.net/2024/01/27/l7Q3C948J5UyznH.png&#34; alt=&#34;图片.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用西瓜数据集4.0来对算法进行测试&#xA;&lt;img src=&#34;https://s2.loli.net/2024/01/27/8gUIJmxhQ1MvOwc.png&#34; alt=&#34;图片.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;main-idea&#34;&gt;main idea&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;距离算法使用欧几里得距离，与sklearn和matlab一致&lt;/li&gt;&#xA;&lt;li&gt;使用最大迭代次数和质心偏移量来控制算法迭代过程&lt;/li&gt;&#xA;&lt;li&gt;使用簇内距离的平均值作为模型评估的标准&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;implement&#34;&gt;implement&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kmeans&lt;/span&gt;(k, X, max_iter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(X, pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; X&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_numpy()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# init vec&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    centroids &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; X[np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice(len(X), k, replace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(max_iter):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# calc distance&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        distances &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linalg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;norm(X[:, np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newaxis] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; centroids, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argmin(distances, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# new center&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        new_centroids &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([X[labels &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(k)])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linalg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;norm(new_centroids &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; centroids) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e-4&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        centroids &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_centroids&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; labels, centroids, distances&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;簇内平方和&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wallpaper Engine in KDE</title>
      <link>https://clingm.github.io/posts/essay/wallpaper-engine-in-kde/</link>
      <pubDate>Thu, 25 Jan 2024 23:05:19 +0800</pubDate>
      <guid>https://clingm.github.io/posts/essay/wallpaper-engine-in-kde/</guid>
      <description>&lt;p&gt;在体验过各种WM后，最终回到了KDE。现在感觉配置这配置那的已经没什么意思了，&#xA;还不如把重心放在学习和技术上，于是又装回了KDE，使用的配置都是默认的，唯独&#xA;做了改变的就是壁纸。毕竟是开机第一眼看到的东西还是要好好整一整的。好久之&#xA;前在B站抓到可以在KDE上使用Wallpaper，想到买了这个东西还没怎么用过，于是就&#xA;尝试使用一下。&lt;/p&gt;&#xA;&lt;p&gt;主要使用的是这个插件&lt;a href=&#34;https://github.com/catsout/wallpaper-engine-kde-plugin&#34;&gt;wallpaper-engine-kde-plugin&lt;/a&gt;&#xA;按照github上的说明一步一步来安装就好了。&lt;/p&gt;&#xA;&lt;p&gt;在安装完插件后还要在Steam安装Wallpaper Engine，注意要在Steam的设置中&lt;code&gt;兼容性 -&amp;gt; 为所有其他产品使用Steam Play&lt;/code&gt;给勾选上才能安装Wallpaper Engine。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2024/01/26/hEbRyNDd8F4LwPa.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;做好所有准备后就可以使用了。回到桌面右键，选择&lt;code&gt;配置桌面和壁纸&lt;/code&gt;，壁纸类型&#xA;选择&lt;code&gt;Wallpaper engine for kde&lt;/code&gt;，然后选择Steam Lib的位置，点击&lt;code&gt;Library&lt;/code&gt;，&#xA;一般是在这个位置&lt;code&gt;~/.local/share/Steam&lt;/code&gt;，如果之前有订阅过壁纸那么现在就可&#xA;以看到啦。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2024/01/26/ZWI3g9iFSb48OzE.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2024/01/26/JhH1NWYCOTl89gX.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Machine Learning Start -- Decision Tree</title>
      <link>https://clingm.github.io/posts/machine-learning/ml-start-decision-tree/</link>
      <pubDate>Tue, 23 Jan 2024 18:53:18 +0800</pubDate>
      <guid>https://clingm.github.io/posts/machine-learning/ml-start-decision-tree/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;intro&lt;/h2&gt;&#xA;&lt;p&gt;西瓜书的决策树部分，在这篇文章中，将主要实现书中的&lt;code&gt;TreeGenerate&lt;/code&gt;算法以及各种选取&#xA;最优划分属性的方式。&lt;/p&gt;&#xA;&lt;p&gt;决策树在进行学习的时候有一个很要命的问题，就是过拟合。因为决策树会把所有的样本特征&#xA;都学习到，所以过拟合是很难避免的，虽然可以使用剪枝的方法来减少过拟合。不过这篇文章&#xA;并不会涉及到剪枝的内容。&lt;/p&gt;&#xA;&lt;p&gt;数据集依然使用西瓜书对应的西瓜数据集&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    色泽  根蒂  敲声  纹理  脐部  触感 好瓜&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   青绿  蜷缩  浊响  清晰  凹陷  硬滑  是&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   乌黑  蜷缩  沉闷  清晰  凹陷  硬滑  是&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   乌黑  蜷缩  浊响  清晰  凹陷  硬滑  是&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   青绿  蜷缩  沉闷  清晰  凹陷  硬滑  是&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;   浅白  蜷缩  浊响  清晰  凹陷  硬滑  是&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;   青绿  稍蜷  浊响  清晰  稍凹  软粘  是&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;   乌黑  稍蜷  浊响  稍糊  稍凹  软粘  是&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;   乌黑  稍蜷  浊响  清晰  稍凹  硬滑  是&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;   乌黑  稍蜷  沉闷  稍糊  稍凹  硬滑  否&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;   青绿  硬挺  清脆  清晰  平坦  软粘  否&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;  浅白  硬挺  清脆  模糊  平坦  硬滑  否&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;  浅白  蜷缩  浊响  模糊  平坦  软粘  否&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;  青绿  稍蜷  浊响  稍糊  凹陷  硬滑  否&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;  浅白  稍蜷  沉闷  稍糊  凹陷  硬滑  否&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;  乌黑  稍蜷  浊响  清晰  稍凹  软粘  否&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;  浅白  蜷缩  浊响  模糊  平坦  硬滑  否&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;  青绿  蜷缩  沉闷  稍糊  稍凹  硬滑  否&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;best-feature-to-split&#34;&gt;best feature to split&lt;/h2&gt;&#xA;&lt;p&gt;划分数据集的方式有基于信息增益，信息增益率和基尼指数。笔者只实现了信息增益和基尼指数&#xA;，因为信息增益率实现起来其实就和信息增益一样，只不过加了一个惩罚在里面。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Machine Learning Start -- Linear</title>
      <link>https://clingm.github.io/posts/machine-learning/ml-start-linear/</link>
      <pubDate>Sun, 21 Jan 2024 21:52:06 +0800</pubDate>
      <guid>https://clingm.github.io/posts/machine-learning/ml-start-linear/</guid>
      <description>&lt;h2 id=&#34;instro&#34;&gt;instro&lt;/h2&gt;&#xA;&lt;p&gt;线性回归是在特征与输出之间构建一个线性方程。如$ y = \sum_{i=0}^{n}a_{i}x_{i} + b$, $x, y$分别为特征向量和输出。&#xA;$a$作为需要求解的系数。一般的线性回归适用于回归任务（连续值），对于分类任务则使用对数几率回归，又称&#xA;逻辑斯特回归，使用对数几率函数$ f(x) = \frac{1}{1-e^{-x}} $。对于多分类任务则使用Softmax回归。&lt;/p&gt;&#xA;&lt;p&gt;线性回归问题，书本上给了两种求解方法：1. 最小二乘法 2. 梯度下降法。本篇文章将只实现最小二乘法，&#xA;因为梯度下降在神经网络中更加适合&lt;/p&gt;&#xA;&lt;h2 id=&#34;linear-regression&#34;&gt;Linear Regression&lt;/h2&gt;&#xA;&lt;h3 id=&#34;basic-model&#34;&gt;basic model&lt;/h3&gt;&#xA;&lt;p&gt;特征向量$x$，输出$y$，有&#xA;$$&#xA;\begin{aligned}&#xA;y &amp;amp;= a_0x_0 + a_1x_1 + \cdots + a_{i-1}x_{n-1} + b \\&#xA;&amp;amp;= \sum_{i=0}^{n-1}a_ix_i + b&#xA;\end{aligned}&#xA;$$&lt;/p&gt;&#xA;&lt;p&gt;把$a$和$b$吸收入向量形式$ w=(a;b) $, 相应的，把数据集$D$表示为一个$m×(d+1)$大小的矩阵，其中每行对应于一个示例，该行前d个元素对应于示例的d个属性值，最后一个元素恒置为1，即：&lt;/p&gt;&#xA;&lt;p&gt;$$&#xA;\mathbf{X}=\begin{pmatrix}x_{11}&amp;amp;x_{12}&amp;amp;\ldots&amp;amp;x_{1d}&amp;amp;1\\&#xA;x_{21}&amp;amp;x_{22}&amp;amp;\ldots&amp;amp;x_{2d}&amp;amp;1\\&#xA;\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots&amp;amp;\vdots\\&#xA;x_{m1}&amp;amp;x_{m2}&amp;amp;\ldots&amp;amp;x_{md}&amp;amp;1\end{pmatrix}=\begin{pmatrix}\boldsymbol{x}_1^\mathrm{T}&amp;amp;1\\x_2^\mathrm{T}&amp;amp;1\\ \vdots&amp;amp;\vdots\\x_m^\mathrm{T}&amp;amp;1\end{pmatrix}&#xA;$$&lt;/p&gt;&#xA;&lt;p&gt;$$&#xA;Y = Xw&#xA;$$&lt;/p&gt;&#xA;&lt;p&gt;损失函数选择均方差损失&lt;/p&gt;&#xA;&lt;p&gt;$$&#xA;\begin{aligned}&#xA;L &amp;amp;= \sum_{i=0}^{n-1}(y - \hat{y})^2 \\&#xA;&amp;amp;= \sum_{i=0}^{n-1}(y - \sum_{i=0}^{n-1}a_ix_i - b)^2 \\&#xA;&amp;amp;= (Y - Xw)^2&#xA;\end{aligned}&#xA;$$&lt;/p&gt;</description>
    </item>
    <item>
      <title>Machine Learning Start</title>
      <link>https://clingm.github.io/posts/machine-learning/ml-start/</link>
      <pubDate>Sun, 21 Jan 2024 20:02:14 +0800</pubDate>
      <guid>https://clingm.github.io/posts/machine-learning/ml-start/</guid>
      <description>&lt;p&gt;以此篇作为开头，开一个新坑是关于西瓜书机器学习各种算法的实验。&lt;/p&gt;&#xA;&lt;p&gt;尽请期待吧。&lt;/p&gt;</description>
    </item>
    <item>
      <title>New Keyboard</title>
      <link>https://clingm.github.io/posts/essay/new-keyboard/</link>
      <pubDate>Thu, 18 Jan 2024 16:28:24 +0800</pubDate>
      <guid>https://clingm.github.io/posts/essay/new-keyboard/</guid>
      <description>&lt;p&gt;心血来潮买了一把键盘玩，型号是VGN的v87 Pro 狄安娜配色，拼多多299拿下。其实到最后还在纠结是买v87 Pro 还是 Vk87，因为两个&#xA;都很好看，对于沉迷二次元的我来说(，不过最后还是选择了轴体更好的v87 Pro，可是VK87的背面真的好好看啊。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2024/01/21/HwRECvqtJ5dhjmS.jpg&#34; alt=&#34;图片.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;总体来说这把键盘的使用体验还是挺不错的，阿尼亚轴的声音也很好听。可惜主要还是在寝室使用，打算把字母区和数字区换成静音轴了，就决定是你了水蜜桃轴V2。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Start to Use AstroNvim</title>
      <link>https://clingm.github.io/posts/essay/start-to-use-astronvim/</link>
      <pubDate>Sun, 31 Dec 2023 14:32:11 +0800</pubDate>
      <guid>https://clingm.github.io/posts/essay/start-to-use-astronvim/</guid>
      <description>&lt;p&gt;AstroNvim is an aesthetic and feature-rich Neovim configuration that focuses on extensibility and usability.&lt;/p&gt;&#xA;&lt;p&gt;最近把原先的LzayVim换成了AstroNvim，用了一段时间感觉还不错&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-astronvim&#34;&gt;why AstroNvim&lt;/h2&gt;&#xA;&lt;p&gt;首先引用以下AstroNvim官网的话&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;We found other Neovim configurations either being powerful out of the box but hard to customize, or easy to customize but minimal out of the box functionality. AstroNvim aims to find the middle ground with a great out of the box experience while empowering the user to make tweaks where they want.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Migrate From Hexo to Hugo</title>
      <link>https://clingm.github.io/posts/essay/migrate-from-hexo-to-hugo/</link>
      <pubDate>Sat, 23 Dec 2023 14:55:24 +0800</pubDate>
      <guid>https://clingm.github.io/posts/essay/migrate-from-hexo-to-hugo/</guid>
      <description>&lt;p&gt;嗨嗨嗨，Blog大变样。&lt;/p&gt;&#xA;&lt;p&gt;上上个周末强网杯打的有点道心破碎，于是抽了点时间出来把博客整了整，大体上就是从hexo迁移到了hugo。于是呢就来简单聊聊整个迁移的过程。&lt;/p&gt;&#xA;&lt;p&gt;为什么要迁移到hugo呢？&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;我hexo的数学公式不知道什么原因一直渲染有问题。&lt;/li&gt;&#xA;&lt;li&gt;感觉hexo有点慢，而且臃肿。正好hugo自称是世界上最快的网页生成框架，就想试试。&lt;/li&gt;&#xA;&lt;li&gt;总感觉用hugo比用hexo要高级….&lt;/li&gt;&#xA;&lt;li&gt;对于go语言写的东西没有抵抗力，而且越来越不喜欢nodejs了。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;于是在上周二决定要整成hugo，从此命运的齿轮开始转动。&lt;/p&gt;&#xA;&lt;p&gt;安装hugo，在archlinux上直接&lt;code&gt;yay -S hugo&lt;/code&gt;就ok了。&lt;/p&gt;&#xA;&lt;p&gt;装好hugo后的第一步应该要先选择一个自己喜欢的主题。&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;hugo themes&lt;/a&gt;这里有非常多的好看的主题可以选择。我使用的是&lt;a href=&#34;https://themes.gohugo.io/themes/hugo-theme-jane/&#34;&gt;Jane&lt;/a&gt;，在此呢也是非常推荐大家使用这个主题尤其是喜欢&amp;quot;简洁&amp;quot;的小伙伴。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://themes.gohugo.io/themes/hugo-theme-jane/screenshot_hue86ec56387d55a4e982f80cc54614468_206579_750x500_fill_catmullrom_top_3.png&#34; alt=&#34;Jane preview&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;关于主题的配置可以看主题的&lt;a href=&#34;https://github.com/xianmin/hugo-theme-jane/blob/master/README-zh.md&#34;&gt;github仓库&lt;/a&gt;有很详细的介绍，而且配置文件里也有很详细的中文注释和英文注释，我这里主要提一下数学公式的配置。&lt;/p&gt;&#xA;&lt;p&gt;在示例配置文件theme/jane/exampleSite/full-config.toml中有关于数学公式的配置项（记得把这个复制到博客根目录的配置文件中）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2023/12/23/xt51I7Y8cw3ybWi.png&#34; alt=&#34;Screenshot_2023-12-23-21-57-07.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以在这里直接选一个开，但是这样还不够，我们需要找到主题中用于渲染latex公式的js部分。&lt;/p&gt;&#xA;&lt;p&gt;我已经找到在themes/jane/layout/partials/scripts.html，把他修改成下面这个样子&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Mathjax --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{- if and (or .Params.mathjax (and .Site.Params.mathjax (ne .Params.mathjax false))) (or .IsPage .IsHome) }}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    window.&lt;span style=&#34;color:#a6e22e&#34;&gt;MathJax&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;showProcessingMessages&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;messageStyle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt; };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;async&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;MathJax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Hub&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;tex2jax&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;inlineMath&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;], [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\\(&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\\)&amp;#39;&lt;/span&gt;]], &lt;span style=&#34;color:#a6e22e&#34;&gt;displayMath&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$$&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$$&amp;#39;&lt;/span&gt;], [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\[\[&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\]\]&amp;#39;&lt;/span&gt;]], &lt;span style=&#34;color:#a6e22e&#34;&gt;processEscapes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;processEnvironments&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;skipTags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;noscript&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;style&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;textarea&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pre&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;TeX&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;equationNumbers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;autoNumber&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AMS&amp;#34;&lt;/span&gt; }, &lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AMSmath.js&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AMSsymbols.js&amp;#34;&lt;/span&gt;] } } }); &lt;span style=&#34;color:#a6e22e&#34;&gt;MathJax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Hub&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Queue&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() { &lt;span style=&#34;color:#75715e&#34;&gt;// Fix &amp;lt;code&amp;gt; tags after MathJax finishes running. This is a // hack to overcome a shortcoming of Markdown. Discussion at // https://github.com/mojombo/jekyll/issues/199 var all = MathJax.Hub.getAllJax(), i; for(i = 0; i &amp;lt; all.length; i += 1) { all[i].SourceElement().parentNode.className += &amp;#39; has-jax&amp;#39;; } });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;style&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;code&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;has-jax&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;font&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;inherit&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;font-size&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;%&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;background&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;inherit&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;border&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;inherit&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;#515151&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;style&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{- end }}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- End --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- KaTeX --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{- if and (or .Params.katex (and .Site.Params.katex (ne .Params.katex false))) (or .IsPage .IsHome) }}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.11.0/dist/katex.min.css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sha384-BdGj8xC2eZkQaxoQ8nSLefg4AV4/AwB3Fj+8SUSo7pnKP6Eoy18liIKTPn9oBYNG&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt; /&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- The loading of KaTeX is deferred to speed up page rendering --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.11.0/dist/katex.min.js&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sha384-JiKN5O8x9Hhs/UE5cT5AAJqieYlOZbGT3CHws/y97o3ty4R7/O5poG9F3JoiOYw1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- To automatically render math in text elements, include the auto-render extension: --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;defer&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.11.0/dist/contrib/auto-render.min.js&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;onload&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;renderMathInElement(document.body);&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    document.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DOMContentLoaded&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;renderMathInElement&lt;/span&gt;(document.&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;, { &lt;span style=&#34;color:#75715e&#34;&gt;// ...options... // customised options // • auto-render specific keys, e.g.: delimiters: [ { left: &amp;#39;$$&amp;#39;, right: &amp;#39;$$&amp;#39;, display: true }, { left: &amp;#39;$&amp;#39;, right: &amp;#39;$&amp;#39;, display: false }, { left: &amp;#39;\\(&amp;#39;, right: &amp;#39;\\)&amp;#39;, display: false }, { left: &amp;#39;\\[&amp;#39;, right: &amp;#39;\\]&amp;#39;, display: true } ], // • rendering keys, e.g.: throwOnError: false }); });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{- end }}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- End --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原先这里应该是空的，我加入了一些mathjax和katex的配置，比如公式的前缀后缀这些。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Qwbctf 2023</title>
      <link>https://clingm.github.io/posts/crypto/qwbctf-2023/</link>
      <pubDate>Fri, 22 Dec 2023 15:06:27 +0800</pubDate>
      <guid>https://clingm.github.io/posts/crypto/qwbctf-2023/</guid>
      <description>&lt;p&gt;新一年的强网杯，但我还是一如既往的菜。&lt;/p&gt;&#xA;&lt;h2 id=&#34;not-only-rsa&#34;&gt;not only rsa&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; bytes_to_long&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; secret &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; flag&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6249734963373034215610144758924910630356277447014258270888329547267471837899275103421406467763122499270790512099702898939814547982931674247240623063334781529511973585977522269522704997379194673181703247780179146749499072297334876619475914747479522310651303344623434565831770309615574478274456549054332451773452773119453059618433160299319070430295124113199473337940505806777950838270849&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;641747&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes_to_long(flag)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flag &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;urandom(n&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bit_length() &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; len(flag) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes_to_long(flag)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(m, e, n)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;out.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;n &lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;f)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;f)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;c &lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;f)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;源码很短，而且这个n可以直接在&lt;a href=&#34;http://factordb.com&#34;&gt;factordb&lt;/a&gt;里面查。发现是$p^5$的形式。继而计算$\phi$, 但是发现和e不互素，而且e是其一个因子，那么方法就只能开根了。我在比赛中其实就想到了AMM + hensel-lifting的方法，但是我写的代码实在跑的太慢。赛后看了N1的WP感觉是sagemath polynomial的大幂数计算的原因🤣&lt;/p&gt;&#xA;&lt;p&gt;我一开始写的代码&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/tr0uble/CTF/tools/crypto-attacks/&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; shared &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; rth_roots&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sage.all &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; GF, ZZ, Zmod, inverse_mod&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tqdm &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tqdm&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6249734963373034215610144758924910630356277447014258270888329547267471837899275103421406467763122499270790512099702898939814547982931674247240623063334781529511973585977522269522704997379194673181703247780179146749499072297334876619475914747479522310651303344623434565831770309615574478274456549054332451773452773119453059618433160299319070430295124113199473337940505806777950838270849&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;641747&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;730024611795626517480532940587152891926416120514706825368440230330259913837764632826884065065554839415540061752397144140563698277864414584568812699048873820551131185796851863064509294123861487954267708318027370912496252338232193619491860340395824180108335802813022066531232025997349683725357024257420090981323217296019482516072036780365510855555146547481407283231721904830868033930943&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91027438112295439314606669837102361953591324472804851543344131406676387779969&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(rth_roots(GF(p), c &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p, e))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hensel_lifting&lt;/span&gt;(f, p, k, m, r, method&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;drop&amp;#34;&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; k, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m must less equal to k&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; k&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; m&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;diff()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;change_ring(Zmod(pm))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# print(fd)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# print(fd.base_ring())&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; fd(r) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The difference of polynomial on x must not equal to zero&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# pn = pk * p&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;change_ring(Zmod(pk&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pm))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# while f_(r) == 0:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;#     pn *= p&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;#     f_ = f.change_ring(Zmod(pn))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# if pn &amp;gt; pk*pm:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;#     return r&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# print(pn)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;((int(f_(r)) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; pk &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; pk) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; int(fd(r)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inverse())) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; pm&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        new_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pk &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; t&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;change_ring(Zmod(pk&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pm))(new_root) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t to lifting&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; new_root&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ZZ[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gen()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;e &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hensel_lift5&lt;/span&gt;(r, p):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hensel_lifting(f, p, i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, r)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; tqdm(range(len(mps))):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hensel_lift5(int(mps[i]), p)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; long_to_bytes(ct):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(long_to_bytes(ct))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个样子根本跑不动，在看了N1的WP后我也把polynomial改成普通的 &lt;code&gt;pow(r, e, p) - c&lt;/code&gt; 的样子，代码变成&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dive Into Coppersmith</title>
      <link>https://clingm.github.io/posts/crypto/dive-into-coppersmith/</link>
      <pubDate>Fri, 15 Dec 2023 15:18:33 +0800</pubDate>
      <guid>https://clingm.github.io/posts/crypto/dive-into-coppersmith/</guid>
      <description>&lt;h2 id=&#34;introduction-of-coppersmiths-method&#34;&gt;Introduction of Coppersmith’s Method&lt;/h2&gt;&#xA;&lt;p&gt;1996年 Don Coppersmith 发表了两片论文，“Finding a Small Root of a Univariate Modular Equation”, “Finding a Small Root of a Bivariate Integer Equation; Factoring with High Bits Known”，第一篇讨论如何求单变量模方程的小根，第二篇讨论如何求双变量整数方程的小根，并且把整数方程拓展到了模方程。&lt;/p&gt;&#xA;&lt;p&gt;Coppersmith’s Method 在公钥密码学中有举足轻重的地位，在大多数RSA的攻击文章中都有涉及到。所以感觉还是不能就停留在平常打CTF比赛中随便调用一下 &lt;code&gt;small_roots&lt;/code&gt; 就ok的程度，至少要知道其中的原理。&lt;/p&gt;&#xA;&lt;p&gt;这次的学习主要基于Steven Galbraith教授写的 “Mathematics of Public Key Cryptograph&amp;quot; 这本书中的第19章的内容。&lt;/p&gt;&#xA;&lt;h2 id=&#34;for-modular-univariate-polynomials&#34;&gt;For Modular Univariate Polynomials&lt;/h2&gt;&#xA;&lt;p&gt;有多项式 $F(x)=s^d + a_{d-1}x^{d-1} + \cdots + a_1x+a_0$ 是一个首一的整系数的d次多项式。假设我们知道存在$x_0$使 $F(x_0)=0\ (mod\ M)$ 并且 $|x_0| &amp;lt; M^{1/d}$。问题就是找到所有这样子的根。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;PS: 之后将使用 $F_M(x)$ 来表示模M的多项式，$F(x)$来表示整数多项式。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Coppersmith’s Method 的核心思想是创建一个方程$G(x)$，而且 $G(x_0)=F_M(x_0)=0$，即$G(x)$拥有与$F_M(x)$相同的解，且$G(x)$的系数足够小可以直接算出$x_0$。&lt;/p&gt;</description>
    </item>
    <item>
      <title>省赛初赛小记</title>
      <link>https://clingm.github.io/posts/crypto/zjss2023/</link>
      <pubDate>Sat, 04 Nov 2023 15:22:00 +0800</pubDate>
      <guid>https://clingm.github.io/posts/crypto/zjss2023/</guid>
      <description>&lt;p&gt;今年再次参加了浙江省赛，今年是第二次参赛了，与队内的web和bin大手子一起组了队，这次预赛的成绩还是不错的，拿到第6，决赛已经稳了。这篇blog就记录一下赛中解的Crypto题水一篇。&lt;/p&gt;&#xA;&lt;h4 id=&#34;小小数学家&#34;&gt;小小数学家&lt;/h4&gt;&#xA;&lt;p&gt;看到题目内容和附件，就直接按照描述所说，计算一坨算式即可，直接eval()了&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;probs = open(&#39;flag.txt&#39;).readlines()&#xA;flag = []&#xA;for prob in probs:&#xA;    prob = prob[:-3]&#xA;    flag.append(int(eval(prob)))&#xA;&#xA;print(bytes(flag))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/clingm/PicGo-image//img/image-20231104143931933.png&#34; alt=&#34;image-20231104143931933&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;ec_party-iii&#34;&gt;EC_Party-III&lt;/h4&gt;&#xA;&lt;p&gt;题目关键代码&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;    p = getPrime(384)&#xA;    q = getPrime(384)&#xA;    n = p*q&#xA;    d = getPrime(80)&#xA;    e = inverse_mod(d, ord_p*ord_q)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;直接就想到了wiener attack，在EC中$Order(p) = p+1+\alpha$,alpha是一个小于$2\sqrt{p}$的数，本来是想要调一下的，但是发现不用改直接连分数就出了&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from sage.all import *&#xA;from Crypto.Util.number import getPrime, long_to_bytes&#xA;&#xA;pk = [10517482889776460226798449006280081167663671198448544453304563030553066300585088657159799516828057458092448853052920, 10402402380108575947733278581108880071660185906203575453837669489513650182676772750843558327746184945922314875098996, 452239510514900186933709062848646640558105660312444312121851933676754687850508865659206624803226663304812888272594694285123823218948165607478144589871322148031514596122654196640778853480169180864412134209693877604844174450602155353, 137939931394124279393027766586199451754893501053862574760060288577053514723631473985259186063729745515767167268309839903521149677958518517988564142828176577685619561913731155508981456507557881596602396073589127827579264760182112015, (312312975924665463422872243489714243976133330669934414246404507993066820310886215600585539115436654843078716170526368558972800117033427241194242498913898005160762151892979826292737941332916578310350510245475526522735894588645243659, 422891099305786578397746684898210811095359530216631541482542541898542508551347882962281401572399110483550691802487377837504493122807091311281569558317360479103461652558448871769150783477147866528115922507893061101403528629595165327)]&#xA;a, b, n, e, C = pk&#xA;&#xA;E = EllipticCurve(Zmod(n), [a, b])&#xA;C = E(C)&#xA;print(C)&#xA;&#xA;def attack1(N, e):&#xA;    convergents = continued_fraction(ZZ(e) / ZZ(N)).convergents()&#xA;    for c in convergents:&#xA;        k = c.numerator()&#xA;        d = c.denominator()&#xA;        M = d*C&#xA;        flag = long_to_bytes(int(M.xy()[0]))&#xA;        try:&#xA;            print(flag[:-16].decode())&#xA;        except:&#xA;            continue&#xA;&#xA;print(attack1(n, e))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/clingm/PicGo-image//img/image-20231104144602967.png&#34; alt=&#34;image-20231104144602967&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>近期比赛的复现</title>
      <link>https://clingm.github.io/posts/crypto/currently-match/</link>
      <pubDate>Sun, 16 Jul 2023 15:24:01 +0800</pubDate>
      <guid>https://clingm.github.io/posts/crypto/currently-match/</guid>
      <description>&lt;p&gt;好久没写blog了。。复现一下最近的比赛&lt;/p&gt;&#xA;&lt;h1 id=&#34;crypto-ctf-2023&#34;&gt;Crypto CTF 2023&lt;/h1&gt;&#xA;&lt;h2 id=&#34;medium&#34;&gt;Medium&lt;/h2&gt;&#xA;&lt;h3 id=&#34;blobfish&#34;&gt;blobfish&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3&#xA;&#xA;import os&#xA;from hashlib import md5&#xA;from Crypto.Cipher import AES&#xA;from Crypto.Random import get_random_bytes&#xA;from PIL import Image&#xA;from PIL import ImageDraw&#xA;from flag import flag&#xA;&#xA;key = get_random_bytes(8) * 2&#xA;iv = md5(key).digest()&#xA;&#xA;cipher = AES.new(key, AES.MODE_CFB, iv=iv)&#xA;enc = cipher.encrypt(flag)&#xA;&#xA;img = Image.new(&#39;RGB&#39;, (800, 50))&#xA;drw = ImageDraw.Draw(img)&#xA;drw.text((20, 20), enc.hex(), fill=(255, 0, 0))&#xA;img.save(&amp;quot;flag.png&amp;quot;)&#xA;&#xA;hkey = &#39;&#39;.join(&#39;\\x{:02x}&#39;.format(x) for x in key[:10])&#xA;&#xA;os.system(f&#39;/bin/zip -0 flag.zip flag.png -e -P \&amp;quot;$(/bin/echo -en \&amp;quot;{hkey}\&amp;quot;)\&amp;quot;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;把flag用AES加密后画到一张图片里，然后用zip压缩，而且是无损压缩，密码就是AES key的前10个字节。&lt;/p&gt;</description>
    </item>
    <item>
      <title>UIUCTF 2023 Crypto WriteUps</title>
      <link>https://clingm.github.io/posts/crypto/uiuctf-2023-crypto-writeups/</link>
      <pubDate>Tue, 04 Jul 2023 15:27:00 +0800</pubDate>
      <guid>https://clingm.github.io/posts/crypto/uiuctf-2023-crypto-writeups/</guid>
      <description>&lt;p&gt;这次用IKUN为ID打了UIUCTF，解了全部的密码题，都挺简单的。&lt;/p&gt;&#xA;&lt;h1 id=&#34;three-time-pad&#34;&gt;Three-Time-Pad&lt;/h1&gt;&#xA;&lt;p&gt;通过题目描述就知道是One-Time-Pad的key reuse。而且给了一个明密文对，xor一下就得到key，然后去解其他的明文就可以了&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from Crypto.Util.strxor import strxor&#xA;&#xA;c1 = open(&#39;Three-Time Pad/c1&#39;, &#39;rb&#39;).read()&#xA;c2 = open(&#39;Three-Time Pad/c2&#39;, &#39;rb&#39;).read()&#xA;c3 = open(&#39;Three-Time Pad/c3&#39;, &#39;rb&#39;).read()&#xA;p2 = open(&#39;Three-Time Pad/p2&#39;, &#39;rb&#39;).read()&#xA;&#xA;key = strxor(c2 ,p2)&#xA;print(key)&#xA;print(strxor(key[:len(c3)], c3[:len(key)]))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;morphing-time&#34;&gt;Morphing Time&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3&#xA;from Crypto.Util.number import getPrime&#xA;from random import randint&#xA;&#xA;with open(&amp;quot;/flag&amp;quot;, &amp;quot;rb&amp;quot;) as f:&#xA;    flag = int.from_bytes(f.read().strip(), &amp;quot;big&amp;quot;)&#xA;&#xA;&#xA;def setup():&#xA;    # Get group prime + generator&#xA;    p = getPrime(512)&#xA;    g = 2&#xA;&#xA;    return g, p&#xA;&#xA;&#xA;def key(g, p):&#xA;    # generate key info&#xA;    a = randint(2, p - 1)&#xA;    A = pow(g, a, p)&#xA;&#xA;    return a, A&#xA;&#xA;&#xA;def encrypt_setup(p, g, A):&#xA;    def encrypt(m):&#xA;        k = randint(2, p - 1)&#xA;        c1 = pow(g, k, p)&#xA;        c2 = pow(A, k, p)&#xA;        c2 = (m * c2) % p&#xA;&#xA;        return c1, c2&#xA;&#xA;    return encrypt&#xA;&#xA;&#xA;def decrypt_setup(a, p):&#xA;    def decrypt(c1, c2):&#xA;        m = pow(c1, a, p)&#xA;        m = pow(m, -1, p)&#xA;        m = (c2 * m) % p&#xA;&#xA;        return m&#xA;&#xA;    return decrypt&#xA;&#xA;&#xA;def main():&#xA;    print(&amp;quot;[$] Welcome to Morphing Time&amp;quot;)&#xA;&#xA;    g, p = 2, getPrime(512)&#xA;    a = randint(2, p - 1)&#xA;    A = pow(g, a, p)&#xA;    decrypt = decrypt\_setup(a, p)&#xA;    encrypt = encrypt\_setup(p, g, A)&#xA;    print(&amp;quot;[$] Public:&amp;quot;)&#xA;    print(f&amp;quot;[$]     {g = }&amp;quot;)&#xA;    print(f&amp;quot;[$]     {p = }&amp;quot;)&#xA;    print(f&amp;quot;[$]     {A = }&amp;quot;)&#xA;&#xA;    c1, c2 = encrypt(flag)&#xA;    print(&amp;quot;[$] Eavesdropped Message:&amp;quot;)&#xA;    print(f&amp;quot;[$]     {c1 = }&amp;quot;)&#xA;    print(f&amp;quot;[$]     {c2 = }&amp;quot;)&#xA;&#xA;    print(&amp;quot;[$] Give A Ciphertext (c1\_, c2\_) to the Oracle:&amp;quot;)&#xA;    try:&#xA;        c1\_ = input(&amp;quot;[$]     c1_ = &amp;quot;)&#xA;        c1_ = int(c1_)&#xA;        assert 1 &amp;lt; c1_ &amp;lt; p - 1&#xA;&#xA;        c2_ = input(&amp;quot;[$]     c2\_ = &amp;quot;)&#xA;        c2\_ = int(c2\_)&#xA;        assert 1 &amp;lt; c2\_ &amp;lt; p - 1&#xA;    except:&#xA;        print(&amp;quot;!! You&#39;ve Lost Your Chance !!&amp;quot;)&#xA;        exit(1)&#xA;&#xA;    print(&amp;quot;[$] Decryption of You-Know-What:&amp;quot;)&#xA;    m = decrypt((c1 * c1_) % p, (c2 * c2_) % p)&#xA;    print(f&amp;quot;[$]     {m = }&amp;quot;)&#xA;&#xA;    # !! NOTE !!&#xA;    # Convert your final result to plaintext using&#xA;    # long\_to\_bytes&#xA;&#xA;    exit(0)&#xA;&#xA;&#xA;if \_\_name\_\_ == &amp;quot;\_\_main\_\_&amp;quot;:&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;题目先生成一个密文对(c1, c2)，然后我们再提供另一个密文对(c1\&lt;em&gt;, c2\&lt;/em&gt;)，最后解密(c1*c1\&lt;em&gt;, c2*c2\&lt;/em&gt;)。这个加密其实具有同态的性质，$D(E(m1_m2))=m1_m2$，我的方法是把(c1\&lt;em&gt;, c2\&lt;/em&gt;)=(c1, c2)，发送过去，decrypt结果开根号&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simple Study of Kannan&#39;s Embedding</title>
      <link>https://clingm.github.io/posts/crypto/simple-study-of-kannan-s-embedding/</link>
      <pubDate>Sun, 21 May 2023 15:28:49 +0800</pubDate>
      <guid>https://clingm.github.io/posts/crypto/simple-study-of-kannan-s-embedding/</guid>
      <description>&lt;p&gt;关于Lattice问题的复习和Kannan’s Embedding for solve LWE的学习记录&lt;/p&gt;&#xA;&lt;h2 id=&#34;svp&#34;&gt;SVP&lt;/h2&gt;&#xA;&lt;p&gt;SVP(shortset vector problem)是找到一个格$L$上的最短向量，最短指的是Euclidean Norm(欧几里得范式)最小。一个格中最少有两个具有相同范式的最短向量，并且这两个向量的符号相反，也就是反向。把第一最短向量记为$\lambda_{1}(L)$，第二最短向量为$\lambda_2(L)$。&lt;/p&gt;&#xA;&lt;h3 id=&#34;usvp&#34;&gt;uSVP&lt;/h3&gt;&#xA;&lt;p&gt;uSVP(unique SVP)是指在一个格中，满足$\lambda_1(L) \ll \lambda_2(L)$，找到$\lambda_1(L)$。或者给一个辅助变量$\gamma$，$\gamma\lambda_1(L) &amp;lt; \lambda_2(L)$，uSVP就变成$\gamma$-uSVP，$\gamma$可以看作是$\lambda_1(L)$和$\lambda_2(L)$之间的gap。所以$\gamma$-uSVP也可以当作是gapSVP。$\gamma$越大，在这个格$L$中就越容易找到$\lambda_1(L)$。&lt;/p&gt;&#xA;&lt;h2 id=&#34;cvp&#34;&gt;CVP&lt;/h2&gt;&#xA;&lt;p&gt;CVP(closest vector problem)是给定一个格$L$和一个不在$L$中的目标向量$t$，在$L$中找到一个向量$v$，与$t$的距离最短。&lt;/p&gt;&#xA;&lt;h3 id=&#34;bdd&#34;&gt;BDD&lt;/h3&gt;&#xA;&lt;p&gt;BDD(Bounded Distance Decoding)是在CVP中规定$||v-t|| &amp;lt; \beta\lambda_1(L)$，而且$\beta$小于0.5，找到的$v$一定是唯一的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;lwe&#34;&gt;LWE&lt;/h2&gt;&#xA;&lt;p&gt;有一个矩阵$A\in\mathbb{Z}_q^{m\times n}$，一个secret vector $s\in\mathbb{Z}_q^n$，还有一个误差向量 $e\in\mathbb{Z}_q^m$，已知$(A,b=As+e)$，求secret vector $s$。$n$ 称为LWE问题的维数，$m$ 称为LWE问题的样本数(simple number)。&lt;/p&gt;&#xA;&lt;h2 id=&#34;q-ary-lattice&#34;&gt;q-ary Lattice&lt;/h2&gt;&#xA;&lt;p&gt;q-ary Lattice 其实就是把一个$\mathbb{Z}_q$的矩阵转换成$\mathbb{Z}$上的格。比如一个$A\in\mathbb{Z}_q^{m\times n}$，$A$ 的q-ary Lattice就是 $$ L_{(\mathbf{A}, q)}=\left{\mathbf{y} \in \mathbb{Z}_{q}^{m} \mid \mathbf{y} \equiv \mathbf{A} \mathbf{x}(\bmod q) \text { for some } \mathbf{x} \in \mathbb{Z}^{n}\right} $$ $L_{(A,q)}$的基$B$，表示为 $$ \mathbf{B}=\left(\frac{\mathbf{A}^{T}}{q \mathbf{I}_{m}}\right) \in \mathbb{Z}^{(m+n) \times m} $$ 简单证明一下， $$ Ax\equiv b\pmod{q} \\ Ax +kq = b \\ [x_0, x_1,\cdots,x_n| k_0,k_1,\cdots,k_m] \begin{bmatrix} A^{T}\\qI_m \end{bmatrix} = [b_0,b_1,\cdots,b_m] $$&lt;/p&gt;</description>
    </item>
    <item>
      <title>浅谈第一次数模比赛的体验</title>
      <link>https://clingm.github.io/posts/mathematical-modeling/first-sm/</link>
      <pubDate>Thu, 18 May 2023 15:30:31 +0800</pubDate>
      <guid>https://clingm.github.io/posts/mathematical-modeling/first-sm/</guid>
      <description>&lt;p&gt;上个星期和几个朋友一起打了第三届长三角数学建模比赛，作为第一次打数模的小白来说感觉就是，有大佬带好爽😍。&lt;/p&gt;&#xA;&lt;p&gt;这次比赛我们选择的是B题，题目描述如下：&lt;/p&gt;&#xA;&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;&#xA;&lt;p&gt;{% pdf &lt;a href=&#34;https://cdn.jsdelivr.net/gh/clingm/PicGo-image/2023%E5%B9%B4%E7%AC%AC%E4%B8%89%E5%B1%8A%E9%95%BF%E4%B8%89%E8%A7%92%E9%AB%98%E6%A0%A1%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9BB%E9%A2%98.pdf&#34;&gt;https://cdn.jsdelivr.net/gh/clingm/PicGo-image/2023%E5%B9%B4%E7%AC%AC%E4%B8%89%E5%B1%8A%E9%95%BF%E4%B8%89%E8%A7%92%E9%AB%98%E6%A0%A1%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9BB%E9%A2%98.pdf&lt;/a&gt; %}&lt;/p&gt;&#xA;&lt;p&gt;​ 看完题目描述，很容易看的出来这是一道大数据题目，需要预测和对参数做一下重要性评估。在整个论文中，我负责的是第二问重要性评估和对论文的排版($\LaTeX$)。&lt;/p&gt;&#xA;&lt;h2 id=&#34;数据收集&#34;&gt;数据收集&lt;/h2&gt;&#xA;&lt;p&gt;​ 作为一道大数据题目，主办方并没有给数据，要我们自己找。这也是整个比赛最难受的地方，我们第一去找的数据是新能源汽车的产量和销量，通过google我们成功找到来一些资源，包括收费的和不收费的😢。在这些资源中，我们又找到了数据的来源，&lt;a href=&#34;http://www.stats.gov.cn/&#34;&gt;国家统计局&lt;/a&gt;，和各地的经济发展公报，比如&lt;a href=&#34;http://tj.jiangsu.gov.cn/art/2021/3/10/art_85275_10487723.html&#34;&gt;2020年江苏省国民经济和社会发展统计公报&lt;/a&gt;，在这里可以找到如下数据&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/clingm/PicGo-image/img/image-20230519125113847.png&#34; alt=&#34;image-20230519125113847&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;​ 这里对新能源汽车的产量有特别标注出来，其他省份也一样但也有比较奇怪的，比如上海市2018年公报内容是这样的&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/clingm/PicGo-image/img/image-20230519125602060.png&#34; alt=&#34;image-20230519125602060&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;并没有把新能源汽车的产量特别标注出来，而是与其他新兴产业合在一起给来一个增长百分比。那我们去找2017年的&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/clingm/PicGo-image/img/image-20230519125829005.png&#34; alt=&#34;image-20230519125829005&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;跟2018一样，2016同样如此。只有2019年开始才跟江苏省一样把新能源汽车标出来，但是江苏，浙江，安徽都是从2016年开始就这样了。还有就是2016年前的官方一点数据都咩有，呜呜~。2016-2022就七年的的时间，而且还是以年为单位的，也是就我们要用7个数据去预测后面3各数据，对于机器学习或者神经网络来说我感觉还是比较难的。&lt;/p&gt;&#xA;&lt;p&gt;​ 在找数据的过程中，我认为最离谱的还是那些卖数据的。明明他们的数据也基本是从官方渠道来的，而且这些数据都是公开的，非公开的国家数据应该也不能拿来卖吧（？。还有一些是专门卖这个赛题的数据的，更离谱了，甚至有些数据还是错的，大无语。&lt;/p&gt;&#xA;&lt;h2 id=&#34;重要性评估&#34;&gt;重要性评估&lt;/h2&gt;&#xA;&lt;p&gt;由于最近有学习人工智能方面的东西，尤其是深度学习，所以一下子就想到了随机森林算法。在得到数据之后，利用sklearn很容易构建出一个模型。我们收集到的的有关数据包括&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;年份&lt;/li&gt;&#xA;&lt;li&gt;燃油价格&lt;/li&gt;&#xA;&lt;li&gt;电动车充电成本&lt;/li&gt;&#xA;&lt;li&gt;电动车平均价格&lt;/li&gt;&#xA;&lt;li&gt;燃油车平均价格&lt;/li&gt;&#xA;&lt;li&gt;新能源汽车能源效率&lt;/li&gt;&#xA;&lt;li&gt;燃油车能源效率&lt;/li&gt;&#xA;&lt;li&gt;新能源车政府补贴金额&lt;/li&gt;&#xA;&lt;li&gt;新能源汽车企业数量&lt;/li&gt;&#xA;&lt;li&gt;新能源汽车专利申请数量&lt;/li&gt;&#xA;&lt;li&gt;新能源汽车充电桩数量&lt;/li&gt;&#xA;&lt;li&gt;新能源汽车燃油车保有量比&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;并且使用&lt;code&gt;新能源汽车燃油车保有量比&lt;/code&gt;作为新能源汽车和燃油车的竞争量。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from sklearn.ensemble import RandomForestRegressor&#xA;&#xA;rfc = RandomForestRegressor(n_estimators=82,random_state=4, n_jobs=1)&#xA;rfc.fit(x_train,y_train)&#xA;y_pred = rfc.predict(x_test)&#xA;y_train_pred = rfc.predict(x_train)&#xA;&#xA;#特征重要程度分析&#xA;feat_labels = x_train.columns[0:]&#xA;importances = rfc.feature_importances_&#xA;indices = np.argsort(importances)[::-1]&#xA;print(&#39;特征重要程度排名&#39;)&#xA;for f,j in zip(range(x_train.shape[1]),indices):&#xA;    print(f + 1, feat_labels[j], importances[j])&#xA;&#xA;#预测准确度&#xA;plt.plot(np.arange(10), np.concatenate((np.array(y_train)[:, 0],np.array(y_test)[:, 0]), 0), &amp;quot;go-&amp;quot;, label=u&amp;quot;True Value&amp;quot;)&#xA;plt.plot(np.arange(10), np.concatenate((y_train_pred,y_pred[:])), &amp;quot;ro-&amp;quot;, label=u&amp;quot;Pred Value&amp;quot;)&#xA;plt.legend()&#xA;plt.show&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;代码并不是完整的，只是对构建模型的过程做一个说明。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cryptanalysis of Rsa Variants With Primes Sharing Most Significant Bits</title>
      <link>https://clingm.github.io/posts/crypto/cryptanalysis-of-rsa-variants-with-primes-sharing-most-significant-bits/</link>
      <pubDate>Sat, 14 Jan 2023 15:31:52 +0800</pubDate>
      <guid>https://clingm.github.io/posts/crypto/cryptanalysis-of-rsa-variants-with-primes-sharing-most-significant-bits/</guid>
      <description>&lt;h2 id=&#34;概论&#34;&gt;概论&lt;/h2&gt;&#xA;&lt;p&gt;当RSA的公钥e和私钥d满足公式$ed-k(p^2-1)(q^2-1)=1$，如果模数m的两个因子p,q有相同的MSB，也就是说，如果p,q的差值$|p-q|$比较小，那么就可以计算出上式中的d，并且分解模数m。&lt;/p&gt;&#xA;&lt;h2 id=&#34;rsa变式&#34;&gt;RSA变式&lt;/h2&gt;&#xA;&lt;h3 id=&#34;rsa-luc&#34;&gt;RSA-LUC&lt;/h3&gt;&#xA;&lt;p&gt;1993年，Smith 和 Lennon 发表了一个RSA变种密码系统，叫做LUC，基于 Lucas sequences。模数$N=pq$，公钥e和私钥d满足 $ed\equiv1 \pmod{(p^2-1)(q^2-1)}$。&lt;/p&gt;&#xA;&lt;p&gt;还有很多其他的变式可以看原文，这些变式都满足 $ed\equiv1 \pmod{(p^2-1)(q^2-1)}$ 这条式子。&lt;/p&gt;&#xA;&lt;p&gt;后面的研究中，把这条式子改写为等式 $ed-k(p^2-1)(q^2-1)=1$ ，并得出 $\frac{k}{d}$ 可以用 $e/(N^2-\frac{9}{4}N+1)$的 连分数形式的逼近来表示，如果 $d &amp;lt; \sqrt{(2N^3-18N^2)/e}$，这个方法将非常有效。&lt;/p&gt;&#xA;&lt;p&gt;在2017年，Bunder发现当公钥e满足 $ex-(p^2-1)(q^2-1)y=z$，可以将Coppersmith方法和连分数方法结合起来，如果 $xy &amp;lt; 2N-4\sqrt{2}N^{\frac{3}{4}}$ 且 $|z| &amp;lt; |p-q|N^{\frac{1}{4}}y$ ，那么可以很有效的分解N，当z=1时，上式变为 $ed-k(p^2-1)(q^2-1)=1$ ，d 的上界为 $d &amp;lt; \sqrt{2N-4\sqrt{2}N^{\frac{3}{4}}}$ 。d 和 e 的界也被考虑成 $e = N^{\alpha}$ 和 $d = N^{\delta}$ 。再到后来密码学家们发现 $ed\equiv1 \pmod{(p^2-1)(q^2-1)}$ 可以被解决，如果 $\delta &amp;lt; \frac{7}{3} - \frac{2}{3}\sqrt{1+3\alpha}$ 。&lt;/p&gt;&#xA;&lt;p&gt;这篇论文主要论述的是RSA模数N=pq，且 $q &amp;lt; p &amp;lt; 2q$，$p-q=N^{\beta}$。如果p和q满足 $q&amp;lt;p&amp;lt;2q$，那么 $\beta$ 总是小于0.5的，而且当 $\beta$ 小于0.25时就可以费马分解的方法直接分解N了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Elliptic Curve</title>
      <link>https://clingm.github.io/posts/crypto/elliptic-curve/</link>
      <pubDate>Thu, 15 Dec 2022 15:33:52 +0800</pubDate>
      <guid>https://clingm.github.io/posts/crypto/elliptic-curve/</guid>
      <description>&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;&#xA;&lt;p&gt;在数学上，&lt;strong&gt;椭圆曲线&lt;/strong&gt;（Elliptic curve，缩写为EC）为一&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BB%A3%E6%95%B0%E6%9B%B2%E7%BA%BF&#34; title=&#34;代数曲线&#34;&gt;平面代数曲线&lt;/a&gt;，由如下形式的方程定义 $$ y^2=x^3 + ax + b $$&lt;/p&gt;&#xA;&lt;p&gt;其中$a$和$b$为实数。这类方程被称为short Weierstrass （韦尔斯特拉斯）方程。椭圆曲线的定义也要求曲线是非奇异的。几何上来说，这意味着图像里面没有尖点、自相交或孤立点。代数上来说，这成立当且仅当判别式 $$ \Delta=-16(4a^3+27b^2) $$ 不等于0。 有short Weierstrass自然也有long Weierstrass方程 $$ y^2+a_1xy+a_3y=x^3+a_2x^2+a_4x+a_6 $$ （至于为什么没有$a_5$我也不知道，看过的资料里都是没有$a_5$的） long Weierstrass形式可以转化为short Weierstrass形式。 令$y\longrightarrow y-\frac{(a_1x+a_3)}{2}$，化简后 $$ y^2=x^3+Ax^2+Bx+C $$ 再令$x\longrightarrow x-\frac{A}{3}$ $$ y^2=x^3+ax+b $$&lt;/p&gt;&#xA;&lt;h2 id=&#34;实数域&#34;&gt;实数域&lt;/h2&gt;&#xA;&lt;h3 id=&#34;椭圆曲线的加法&#34;&gt;椭圆曲线的加法&lt;/h3&gt;&#xA;&lt;p&gt;由椭圆曲线的加法定义：两个点的连线交曲线的第三点并取与x轴的对称点。 如计算$P=(X_p, Y_p)$和$Q=(X_Q, Y_Q)$的和$R=(X_R, Y_R)$ $$ \lambda=\frac{Y_Q-Y_P}{X_Q-X_P} $$ $$ X_R=\lambda^2-X_P-X_Q $$ $$ Y_R=\lambda(X_P-X_R)-Y_P $$ 或 $$ Y_R=\lambda(X_Q-X_R)-Y_Q $$&lt;/p&gt;&#xA;&lt;p&gt;当$P=Q$的时候，$P,Q$的连线变成椭圆曲线的切线。此时对曲线方程的两边取微分，并且知道切线的斜率等于y的微分比x的微分 $$ 2yd_y=3x^2d_x+ad_x $$ 整理后得 $$ \lambda=\frac{d_y}{d_x}=\frac{3x^2+a}{2y} $$ 计算$X_R,Y_R$的公式与上面相同。&lt;/p&gt;&#xA;&lt;h2 id=&#34;有限域&#34;&gt;有限域&lt;/h2&gt;&#xA;&lt;p&gt;实际上在定义在有限域上的椭圆曲线的加法也可以用实数域的公式，只不过除法变成求逆元 $$ \lambda=(Y_Q-Y_P)(X_Q-X_P)^{-1} \pmod{p} $$ 当$P=Q$时 $$ \lambda=(3x^2+a)(2y)^{-1} \pmod{p} $$ 但是计算乘法逆元总是复杂的（即使用拓展欧几里德算法）。所以介绍下射影平面坐标。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hitcon Ctf 2022 Secret</title>
      <link>https://clingm.github.io/posts/crypto/hitcon-ctf-2022-secret/</link>
      <pubDate>Fri, 02 Dec 2022 15:36:08 +0800</pubDate>
      <guid>https://clingm.github.io/posts/crypto/hitcon-ctf-2022-secret/</guid>
      <description>&lt;h2 id=&#34;源码&#34;&gt;源码&lt;/h2&gt;&#xA;&lt;p&gt;prob.py&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;import random, os&#xA;from Crypto.Util.number import getPrime, bytes_to_long&#xA;&#xA;p = getPrime(1024)&#xA;q = getPrime(1024)&#xA;n = p * q&#xA;&#xA;flag = open(&#39;flag&#39;,&#39;rb&#39;).read()&#xA;pad_length = 256 - len(flag)&#xA;m = bytes_to_long(os.urandom(pad_length) + flag)&#xA;assert(m &amp;lt; n)&#xA;es = [random.randint(1, 2**512) for _ in range(64)]&#xA;cs = [pow(m, p + e, n) for e in es]&#xA;print(es)&#xA;print(cs)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;思路&#34;&gt;思路&lt;/h2&gt;&#xA;&lt;h3 id=&#34;recover-n&#34;&gt;Recover N&lt;/h3&gt;&#xA;&lt;p&gt;题目给出了64组&lt;/p&gt;&#xA;&lt;p&gt;$$ c_i\equiv m^{p+e_i} \pmod{n} $$ 但是并没有给模数$n$。其实这类题目在N1CTF（EzDLP）以及maple师傅的另一道&lt;a href=&#34;https://github.com/maple3142/My-CTF-Challenges/tree/master/ImaginaryCTF/Round%2026/no_modulus&#34;&gt;题目&lt;/a&gt;中出现过。&lt;/p&gt;&#xA;&lt;p&gt;需要恢复模数，就需要构造出像这样的式子&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hitcon Ctf 2022 Superprime</title>
      <link>https://clingm.github.io/posts/crypto/hitcon-ctf-2022-superprime/</link>
      <pubDate>Wed, 30 Nov 2022 15:42:47 +0800</pubDate>
      <guid>https://clingm.github.io/posts/crypto/hitcon-ctf-2022-superprime/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;继续复现HITCON CTF 的赛题。争取近期全部复现完。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;源码&#34;&gt;源码&lt;/h2&gt;&#xA;&lt;p&gt;chall.py&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from Crypto.Util.number import getPrime, isPrime, bytes_to_long&#xA;&#xA;def getSuperPrime(nbits):&#xA;    while True:&#xA;        p = getPrime(nbits)&#xA;        pp = bytes_to_long(str(p).encode())&#xA;        if isPrime(pp):&#xA;            return p, pp&#xA;&#xA;&#xA;p1, q1 = getSuperPrime(512)&#xA;p2, q2 = getSuperPrime(512)&#xA;p3, q3 = getSuperPrime(512)&#xA;p4, q4 = getSuperPrime(512)&#xA;p5, q5 = getSuperPrime(512)&#xA;&#xA;n1 = p1 * q1&#xA;n2 = p2 * p3&#xA;n3 = q2 * q3&#xA;n4 = p4 * q5&#xA;n5 = p5 * q4&#xA;&#xA;e = 65537&#xA;c = bytes_to_long(open(&amp;quot;flag.txt&amp;quot;, &amp;quot;rb&amp;quot;).read().strip())&#xA;for n in sorted([n1, n2, n3, n4, n5]):&#xA;    c = pow(c, e, n)&#xA;&#xA;print(f&amp;quot;{n1 = }&amp;quot;)&#xA;print(f&amp;quot;{n2 = }&amp;quot;)&#xA;print(f&amp;quot;{n3 = }&amp;quot;)&#xA;print(f&amp;quot;{n4 = }&amp;quot;)&#xA;print(f&amp;quot;{n5 = }&amp;quot;)&#xA;print(f&amp;quot;{e = }&amp;quot;)&#xA;print(f&amp;quot;{c = }&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;思路&#34;&gt;思路&lt;/h2&gt;&#xA;&lt;p&gt;首先可以令&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hitcon Ctf 2022 Babysss</title>
      <link>https://clingm.github.io/posts/crypto/hitcon-ctf-2022-babysss/</link>
      <pubDate>Mon, 28 Nov 2022 15:46:12 +0800</pubDate>
      <guid>https://clingm.github.io/posts/crypto/hitcon-ctf-2022-babysss/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;周末抽时间看了一下HITCON的题，不愧是顶尖的比赛。由于水平比较菜，在比赛期间就做出来这么一道题（实际上就周六早上看了一下，下午赶ddl，周日打安洵杯）。&lt;a href=&#34;https://blog.maple3142.net/&#34;&gt;maple3142&lt;/a&gt;师傅和lyc师傅出的题目质量都很高，这个星期再复现学习一下。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;chall.py&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from random import SystemRandom&#xA;from Crypto.Cipher import AES&#xA;from hashlib import sha256&#xA;from secret import flag&#xA;&#xA;rand = SystemRandom()&#xA;&#xA;&#xA;def polyeval(poly, x):&#xA;    return sum([a * x**i for i, a in enumerate(poly)])&#xA;&#xA;&#xA;DEGREE = 128&#xA;SHARES_FOR_YOU = 8  # I am really stingy :)&#xA;&#xA;poly = [rand.getrandbits(64) for _ in range(DEGREE + 1)]&#xA;&#xA;shares = []&#xA;for _ in range(SHARES_FOR_YOU):&#xA;    x = rand.getrandbits(16)&#xA;    y = polyeval(poly, x)&#xA;    shares.append((x, y))&#xA;print(shares)&#xA;&#xA;secret = polyeval(poly, 0x48763)&#xA;key = sha256(str(secret).encode()).digest()[:16]&#xA;cipher = AES.new(key, AES.MODE_CTR)&#xA;print(cipher.encrypt(flag))&#xA;print(cipher.nonce)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;output.txt&lt;/p&gt;</description>
    </item>
    <item>
      <title>Breaking Ecdsa From Nonce Bits</title>
      <link>https://clingm.github.io/posts/crypto/breaking-ecdsa-from-nonce-bits/</link>
      <pubDate>Tue, 22 Nov 2022 15:48:05 +0800</pubDate>
      <guid>https://clingm.github.io/posts/crypto/breaking-ecdsa-from-nonce-bits/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;如果对HNP不太了解，可以先看一下我的另一篇文章&lt;a href=&#34;https://clingm.github.io/2022/11/18/Hidden-Number-Problem/&#34;&gt;HNP&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;preview&#34;&gt;Preview&lt;/h2&gt;&#xA;&lt;p&gt;先简单回顾一下HNP和ECDSA。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Hidden Number problem（HNP）&lt;/strong&gt; ：有一个对外保密的数$\alpha$和对外公开的模数$n$。随机的选择$t_i$计算$s_i=\alpha t_i\ mod\ n$，并且泄漏出$s_i$的最高有效位，就可以利用$CVP$的方法去恢复$\alpha$。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;ECDSA&lt;/strong&gt; ：在有限域$\mathbb{F}p$上选择椭圆曲线$E\left(\mathbb{F}_{p}\right)$，以及阶为$n$的子群的基点$G$。私钥为$0\leq d &amp;lt; n$，公钥为$dG=Q$。 签名：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;选择nonce为随机数$k$&lt;/li&gt;&#xA;&lt;li&gt;计算明文的$hash$，$h=Hash(m)$&lt;/li&gt;&#xA;&lt;li&gt;计算$r=(kG)_x$，x表示$kG$的x坐标&lt;/li&gt;&#xA;&lt;li&gt;计算$s = k^{-1} \cdot (h+d\cdot r)\ mod\ n$&lt;/li&gt;&#xA;&lt;li&gt;签名为$(r, s)$&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ecdsa-as-a-hnp&#34;&gt;ECDSA as a HNP&lt;/h2&gt;&#xA;&lt;p&gt;由ECDSA的签名过程，重写一下公式。&lt;/p&gt;&#xA;&lt;p&gt;$$ -s^{-1}\cdot h + k\equiv s^{-1}\cdot r \cdot d \pmod{n} $$&lt;/p&gt;&#xA;&lt;p&gt;与HNP问题对应一下，令&lt;/p&gt;&#xA;&lt;p&gt;$$ \begin{aligned} \alpha=d \\ t_i=s^{-1}\cdot r \\ a_i = s^{-1}\cdot h \end{aligned} $$&lt;/p&gt;&#xA;&lt;p&gt;由于nonce相较于$a_i$来说较小，所以&lt;/p&gt;&#xA;&lt;p&gt;$$ \begin{aligned} MSB_{\alpha,k}(t_i) &amp;amp;= MSB_k(\alpha \cdot t_i\ mod\ n) \\ &amp;amp;= MSB_k(d\cdot s^{-1}\cdot r) \\ &amp;amp;= MSB_k(-a_i + k) \\ &amp;amp;= n-a_i \end{aligned} $$&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hidden Number Problem</title>
      <link>https://clingm.github.io/posts/crypto/hidden-number-problem/</link>
      <pubDate>Fri, 18 Nov 2022 15:49:12 +0800</pubDate>
      <guid>https://clingm.github.io/posts/crypto/hidden-number-problem/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在最近的很多比赛都遇到了这个Hidden Number Problem(HNP)，所以抽个时间来仔细学习一下，然后马上要HGAME2023了，正好准备一下题目给新生写。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;introduce&#34;&gt;Introduce&lt;/h2&gt;&#xA;&lt;p&gt;HNP问题第一次被提出是在这篇论文中 &lt;a href=&#34;https://crypto.stanford.edu/~dabo/pubs/abstracts/dhmsb.html&#34;&gt;“Hardness of computing the most significant bits of secret keys in Diffie-Hellman and related schemes” by Dan Boneh and Ramarathnam Venkatesan&lt;/a&gt;。HNP问题本来是用来研究Diffie-Hellman共享密钥中的最高有效位是否与整个秘密一样难以计算？并且D. Boneh和R. Venkatesan还展示了一种有效的算法，用于在有足够大的位泄漏的情况下恢复密钥。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这个方法用到了格和格基规约的算法，一开始学习格密码时把重点放在了基于格的密钥系统的学习上，但格终究是数学上的东西，数学说白了就是一个工具，那么格自然也是一个工具，只不过我们把格这个有力的工具用在了密码分析上而已。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;how-is-the-hnp-defined&#34;&gt;How is the HNP defined&lt;/h2&gt;&#xA;&lt;p&gt;论文中首先提出了most significant bits（MSB）的定义。首先令$p$是一个素数，$n$是$p$的二进制位数，即$n=log_2(p)$，用$x\ mod\ p$来表示一个定义在有限域的数$a \in GF(p)$，即$x \equiv a \pmod{p}$。定义$MSB_k(x)$的值为$t$并且 $(t-1)\cdot p/2^k\leq x &amp;lt;t \cdot p/2^k$，或者更简单的定义 $$ MSB_k(x)=z,\quad |x-z|&amp;lt; p/2^k $$&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;About the $MSB_k(x)$&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;一看到most signficant bits可能很多人都会想当然的认为是$x$的最高$k$位。其实不然，根据定义，可以写一个小demo&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from random import randint&#xA;from sage.all import *&#xA;from Crypto.Util.number import getPrime&#xA;# Some parameters of the game, chosen for simplicity.&#xA;&#xA;# p - A prime number for our field.&#xA;p = getPrime(128)&#xA;&#xA;# n - The number of bits in `p`.&#xA;n = ceil(log(p, 2))&#xA;&#xA;# k - The number of significant bits revealed by the oracle.&#xA;# Using parameters from Thereom 1.&#xA;k = ceil(sqrt(n)) + ceil(log(n, 2))&#xA;print(f&amp;quot;The number of significant bits = {k}&amp;quot;)&#xA;&#xA;def msb(query):&#xA;    &amp;quot;&amp;quot;&amp;quot;Returns the MSB of query based on the global paramters p, k.&#xA;    &amp;quot;&amp;quot;&amp;quot;&#xA;    while True:&#xA;        z = randint(1, p-1)&#xA;        answer = abs(query - z)&#xA;        if answer &amp;lt; p / 2**(k+1):&#xA;            break&#xA;    return z&#xA;&#xA;x = randint(1, p-1)&#xA;print(f&amp;quot;x = {x}&amp;quot;)&#xA;print(f&amp;quot;MSB&#39;s output = {msb(x)}&amp;quot;)&#xA;print(f&amp;quot;most k bit of x = {x &amp;gt;&amp;gt; (n - k)}&amp;quot;)&#xA;&#xA;&#39;&#39;&#39;&#xA;The number of significant bits = 19&#xA;x = 54914319491231438995398843041850226262&#xA;MSB&#39;s output = 54914493779494223381640832877194242316&#xA;|MSB(x) - x| = 124182961411716441204715130169529&#xA;most k bit of x = 84608&#xA;&#39;&#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;如何去理解这个$MSB_k(x)$呢，不难得出以下几点：&lt;/p&gt;</description>
    </item>
    <item>
      <title>AMM Algorithm</title>
      <link>https://clingm.github.io/posts/algorithm/amm-algorithm/</link>
      <pubDate>Mon, 03 Oct 2022 00:51:50 +0800</pubDate>
      <guid>https://clingm.github.io/posts/algorithm/amm-algorithm/</guid>
      <description>&lt;h3 id=&#34;refere11114877pdf-arxivorghttpsarxivorgpdf11114877pdf&#34;&gt;refere：&lt;a href=&#34;https://arxiv.org/pdf/1111.4877.pdf&#34;&gt;1111.4877.pdf (arxiv.org)&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;AMM平方根提取算法可以被拓展到一般的$r^{th}$根提取问题上，并且要求&lt;/p&gt;&#xA;&lt;p&gt;$r\mid p -1，(m, r)=1$&lt;/p&gt;&#xA;&lt;h2 id=&#34;amm算法的核心观点暨在有限域f_p上开2次方的方法&#34;&gt;AMM算法的核心观点暨在有限域$F_p$上开2次方的方法&lt;/h2&gt;&#xA;&lt;p&gt;AMM在有限域$F_p$中开平方根，这要求$p$是一个素数，那么$p$就可以写成$2^t\cdot s$的形式，其中$s$是奇数。对于一个二次剩余$\delta$和二次非剩余$\rho$，我们有&lt;/p&gt;&#xA;&lt;p&gt;$$ (\delta^{s})^{2^{t - 1}}\equiv1\pmod{p}，(\rho^{s})^{2^{t - 1}}\equiv-1\pmod{p} $$&lt;/p&gt;&#xA;&lt;p&gt;如果$t=1$，$\delta^{s}\equiv1\pmod{p}$，两边乘$\delta$得到&lt;/p&gt;&#xA;&lt;p&gt;$$ (\delta^{\frac{s+1}{2}})^{2} \equiv \delta \pmod{p} $$&lt;/p&gt;&#xA;&lt;p&gt;所以$\delta^{\frac{s+1}{2}}$就是一个根。&lt;/p&gt;&#xA;&lt;p&gt;当$t\geq 2$，那么 $(δ^s)^{2^{t−2}} (mod p)\in { 1, −1}$（虽然在是不知道这是为什么，可能是将他当成一个新的二次（非）剩余），引入$k_1={0, 1}$，表示成&lt;/p&gt;&#xA;&lt;p&gt;$$ (\delta^s)^{2^{t-2}}(\rho^s)^{2^{t-1}\cdot k_1}\equiv1\pmod{p} $$&lt;/p&gt;&#xA;&lt;p&gt;当 $(δ^s)^{2^{t−2}} \equiv1(mod p)$，$k_1=0$，$k_1=1$&lt;/p&gt;&#xA;&lt;p&gt;然后我们继续对上面的式子开方， $(δ^s)^{2^{t−3}}(\rho^s)^{2^{t-2}\cdot k_1} \pmod{p}\in { 1, −1}$，并引入$k_2$&lt;/p&gt;&#xA;&lt;p&gt;$$ (\delta^s)^{2^{t-3}}(\rho^s)^{2^{t-2}\cdot k_1}(\rho^s)^{2^{t-1}\cdot k_2}\equiv1\pmod{p} $$&lt;/p&gt;&#xA;&lt;p&gt;一直这样下去得到&lt;/p&gt;&#xA;&lt;p&gt;$$ (\delta^s)(\rho^s)^{2k_1+2^2k_2+\cdots+2^{t-1}k_{t-1}}\equiv1\pmod{p} $$&lt;/p&gt;&#xA;&lt;p&gt;因此我们有&lt;/p&gt;&#xA;&lt;p&gt;$$ (\delta^{\frac{s+1}{2}})^2[(\rho^s)^{k_1+2k_2+\cdots+2^{t-2}k_{t-1}}]^2\equiv \delta \pmod{p} $$&lt;/p&gt;&#xA;&lt;p&gt;算法的过程&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/10/02/RWchA1vrIe6wjMH.png&#34; alt=&#34;Untitled.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;example&#34;&gt;Example:&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.notion.so/AMM-e0e456024cf54c28a1663c6ea231eee3&#34;&gt;AMM算法开二次方根&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;amm算法在f_pm上开2次方&#34;&gt;AMM算法在$F_{p^m}$上开2次方&lt;/h2&gt;&#xA;&lt;p&gt;AMM方法在$F_p$和$F_{p^m}$上的不同在于，不能通过勒让德符号来判断一个二次非剩余&lt;/p&gt;</description>
    </item>
    <item>
      <title>A New Elliptic Curve Based Analogue of Rsa</title>
      <link>https://clingm.github.io/posts/crypto/a-new-elliptic-curve-based-analogue-of-rsa/</link>
      <pubDate>Sun, 02 Oct 2022 15:50:47 +0800</pubDate>
      <guid>https://clingm.github.io/posts/crypto/a-new-elliptic-curve-based-analogue-of-rsa/</guid>
      <description>&lt;h3 id=&#34;refer-a-new-elliptic-curve-based-analogue-of-rsahttpslinkspringercomcontentpdf1010073-540-48285-7_4pdf&#34;&gt;refer: &lt;a href=&#34;https://link.springer.com/content/pdf/10.1007/3-540-48285-7_4.pdf&#34;&gt;A New Elliptic Curve Based Analogue of RSA&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;椭圆曲线&#34;&gt;椭圆曲线&lt;/h2&gt;&#xA;&lt;p&gt;令 p 和 q 是素数，都大于3。并且满足$4a^3 + 27b^2 \not\equiv 0 \pmod{p}$。用$E_p(a, b)$表示模p参数为a,b的椭圆曲线。$y^2 \equiv x^3 + ax + b \pmod{p}$。&lt;/p&gt;&#xA;&lt;p&gt;椭圆曲线的加法计算定义为&lt;/p&gt;&#xA;&lt;p&gt;$$ P+Q=R \tag 1 $$&lt;/p&gt;&#xA;&lt;p&gt;设$P=(x_1, y_1)，Q=(x_2,y_2)，R=(x_3, y_3)$&lt;/p&gt;&#xA;&lt;p&gt;$$ x3 \equiv \lambda^2-x_1-x_2 \mod{p} \tag 2 $$&lt;/p&gt;&#xA;&lt;p&gt;$$ y_3\equiv \lambda(x_1-x_3) - y_1 \pmod{p} $$&lt;/p&gt;&#xA;&lt;p&gt;$$ \lambda \equiv \begin{cases} \frac{y_1-y_2}{x_1-x_2} &amp;amp; if x_1 \not\equiv x_2 \pmod{p} \\ \\ \frac{3x_1^2 + a}{2y_1} &amp;amp; ifx1=x2 \pmod{p} \end{cases} $$&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
